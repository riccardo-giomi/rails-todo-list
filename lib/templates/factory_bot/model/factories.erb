# frozen_string_literal: true

<%
boolean_attributes    = []
attachment_attributes = []
-%>
FactoryBot.define do
  factory :<%=  factory_name + explicit_class_option.to_s %> do
<%
attributes.each do |attribute|
  if attribute.attachment? || attribute.attachments?
    attachment_attributes << attribute
    next
  end

  value = attribute.factory_value.inspect
  if attribute.type == :boolean
    boolean_attributes << attribute
  elsif attribute.type == :datetime
    value += '.to_datetime.in_time_zone'
  elsif attribute.type == :date
    value += '.to_date'
  elsif attribute.type == :time
    value = "Time.zone.parse(#{value}).change(year: 2000, month: 1, day: 1)"
  end
-%>
    <%= attribute.name %> { <%= value %> }
<%
end
-%>

  # Handy for specs with more than one record, specifically those specifying
  # update operations
  factory :another_<%=  factory_name + explicit_class_option.to_s %> do
<%
attributes.each do |attribute|
  next if attribute.attachment? || attribute.attachments?

  value = attribute.alternative_factory_value.inspect
  if attribute.type == :datetime
    value += '.to_datetime.in_time_zone'
  elsif attribute.type == :date
    value += '.to_date'
  elsif attribute.type == :time
    value = "Time.zone.parse('#{value}').change(year: 2000, month: 1, day: 1)"
  end
-%>
    <%= attribute.name %> { <%= value %> }
<%
end
-%>
end

<%
unless attachment_attributes.present? || boolean_attributes.present?
-%>
    # Used to generate "models with valid attributes" in specs, e.g. for
    # requests.
    #
    # Same as the default factory if there are no special attributes like
    # attachments.
    # It can be expanded later if the model gains special attributes.
    factory :complete_<%= factory_name %>
<%
else
-%>
    # Used to generate "models with valid attributes" in specs, e.g. for
    # requests.
    #
    # in specs, e.g. for requests.
    # It can be expanded later if the model gains special attributes.
    factory :complete_<%= factory_name %> do
<%
  boolean_attributes.each do |attribute|
-%>
      <%= attribute.name %> { true }
<%
  end
  if attachment_attributes.present?
-%>

      after(:build) do |object|
<%
    attachment_attributes.each do |attribute|
      image_index = attribute.attachments? ? '_1' : ''
      if attribute.extended_type.in? [:image, :images]
-%>

        object.<%= attribute.name %>.attach(
          io:           File.open(Rails.root.join('spec/fixtures/files/300x300.jpg').to_s),
          filename:     '<%= factory_name %>_<%= attribute.name %><%= image_index %>.jpg',
          content_type: 'image/jpg')
<%
      else
-%>

        object.<%= attribute.name %>.attach(
          io:           File.open(Rails.root.join('spec/fixtures/files/A4.pdf').to_s),
          filename:     '<%= factory_name %>_<%= attribute.name %><%= image_index %>.pdf',
          content_type: 'application/pdf')
<%
      end
    end
-%>
      end
<%
  end
-%>
    end
<%
end

title_index = attributes.index { _1.extended_type == :title }
unless title_index
-%>
    # Used to create "model with invalid attributes" in specs (e.g. requests).
    # Add invalid/empty values here for attributes as you define validations for
    # them in the model.
    #
    # Models should really have at least one required attribute, but if there's
    # none you'll find a mock simulating an invalid model in the specs. When a
    # "real" constraint is added, after updating this factory, you should remove
    # the now useless mock.
    #
    # Note that if there are required attachments nothing needs to be added here.
    factory :invalid_<%= factory_name + explicit_class_option.to_s %>
<%
else
-%>
    # Used to create "model with invalid attributes" in specs (e.g. requests).
    # Add invalid/empty values here for attributes as you define validations for
    # them in the model.
    #
    # Note that if there are required attachments nothing needs to be added here.
    factory :invalid_<%= factory_name + explicit_class_option.to_s %> do
      <%= attributes[title_index].name %> { nil }
    end
<%
end
-%>
  end
end
